

### netplan configuration

netplan_configuration:
  network:
    ethernets:
        ens192:
            dhcp4: no
            dhcp6: no
            addresses:
            - 51.91.33.40/32
            gateway4: 51.91.33.254
            nameservers:
                addresses:
                - 1.1.1.1
            routes:
            - to: 51.91.33.254/32
              via: 0.0.0.0
              scope: link
        ens160:
            addresses:
            - 10.40.0.1/24
            dhcp4: no
            nameservers:
                addresses:
                - 1.1.1.1
                - 9.9.9.9
                search: []
    version: 2

### DHCPd configuration

dhcp_global_domain_name: internal.0x07.pl
dhcp_global_domain_name_servers:
  - 1.1.1.1
  - 9.9.9.9
dhcp_global_default_lease_time: 28800   # 8hrs
dhcp_global_max_lease_time: 43200

dhcp_subnets:
  - ip: 10.40.0.0
    netmask: 255.255.255.0
    range_begin: 10.40.0.101
    range_end: 10.40.0.200
    routers: 10.40.0.1

dhcp_hosts:
  - name: vpn
    mac: '00:0c:29:6a:9d:c6'
    ip: 10.40.0.104
  - name: gitlab
    mac: '00:0c:29:08:3e:d6'
    ip: 10.40.0.105
  - name: haproxy
    mac: '00:0c:29:70:06:09'
    ip: 10.40.0.110
  - name: sextoysdatabase
    mac: '00:0c:29:9f:6f:1a'
    ip: 10.40.0.107
  - name: storage
    mac: '00:0c:29:64:a3:33'
    ip: 10.40.0.113
  - name: media
    mac: '00:0c:29:2b:6e:88'
    ip: 10.40.0.112
  - name: tmp
    mac: '00:0c:29:d2:23:64'
    ip: 10.40.0.114
  - name: tekkit
    mac: '00:0c:29:b4:c3:45'
    ip: 10.40.0.102
  - name: mily.internal.0x07.pl
    mac: '00:0c:29:d0:4b:b7'
    ip: 10.40.0.103

consul_service_status: "started"
consul_configs:
  main:
    bind_addr: 51.91.33.40
    client_addr: 0.0.0.0
    node_name: "{{ ansible_hostname }}"
    data_dir: "{{ consul_data_dir }}"
    datacenter: "valhalla"
    enable_syslog: true
    server: true
    ui: true
    enable_script_checks: true
    rejoin_after_leave: true
    retry_join: "{{ groups['server'] | map('extract', hostvars, ['ansible_default_ipv4', 'address']) | list }}"
    ports:
      dns: 53
    dns_config:
      udp_answer_limit: 64
    bootstrap_expect: "{{ groups['server'] | length | int }}"
    recursors:
      - 1.1.1.1
      - 8.8.8.8


### FERM configuration

ferm_packages:
  - name: 'iptables'
  - name: 'ferm'

# Service management
ferm_service_name: 'ferm'

# Configuration
ferm_variables: |
  @def $DEV_PRIVATE = ens160;
  @def $DEV_WORLD = ens192;
  @def $NET_PRIVATE = 10.40.0.1/24;


  # our static IP address
  @def $HOST_STATIC = 51.91.33.40;

ferm_functions: |
  # convenience function which creates both the nat/DNAT and the filter/FORWARD
  # rule
  @def &FORWARD_TCP($proto, $port, $dest) = {
    table filter chain FORWARD interface $DEV_WORLD outerface $DEV_DMZ daddr $dest proto $proto dport $port ACCEPT;
    table nat chain PREROUTING interface $DEV_WORLD daddr $HOST_STATIC proto $proto dport $port DNAT to $dest;
  }

ferm_rules: |
  table filter {
    chain INPUT {
      policy DROP;
        # connection tracking
        mod state state INVALID DROP;
        mod state state (ESTABLISHED RELATED) ACCEPT;
        # allow local connections
        interface lo ACCEPT;
        # respond to ping
        proto icmp icmp-type echo-request ACCEPT;
        # for netdata
        interface $DEV_WORLD {
            proto tcp dport 19999 ACCEPT;
        }
        # for cockpit
        interface $DEV_WORLD {
            proto tcp dport 9090 ACCEPT;
        }
        # allow SSH connections on our port
        interface $DEV_WORLD {
            proto tcp dport 60022 ACCEPT;
        }
        # the rest is dropped by the above policy (except additional
        # FORWARD rules added by the function &FORWARD_TCP)
    }
    chain OUTPUT {
      policy ACCEPT;
      # connection tracking
      mod state state INVALID DROP;
      mod state state (ESTABLISHED RELATED) ACCEPT;
    }
    chain FORWARD {
      policy DROP;
        # connection tracking
        mod state state NEW ALLOW;
        mod state state INVALID DROP;
        mod state state (ESTABLISHED RELATED) ACCEPT;
        # the internal net may go everywhere
        interface $DEV_PRIVATE ACCEPT;
        # the DMZ may only access the internet
        # the rest is dropped by the above policy
    }

  }
  table nat {
    chain POSTROUTING {
        # masquerade private IP addresses
        saddr ($NET_PRIVATE) outerface $DEV_WORLD SNAT to $HOST_STATIC;
    }
    chain PREROUTING {
        interface ens192 daddr 51.91.33.46/32 proto tcp dport 8180 DNAT to 10.40.0.103:80;
        interface ens192 daddr 51.91.33.46/32 proto tcp dport 62137 DNAT to 10.40.0.103:62137;
        interface ens192 daddr 51.91.33.46/32 proto tcp dport 62138 DNAT to 10.40.0.103:62138;
        interface ens192 daddr 51.91.33.46/32 proto tcp dport 62139 DNAT to 10.40.0.103:62139;
        interface ens192 daddr 51.91.33.46/32 proto tcp dport 62140 DNAT to 10.40.0.103:62140;
        interface ens192 daddr 51.91.33.46/32 proto tcp dport 62141 DNAT to 10.40.0.103:62141;
        interface ens192 daddr 51.91.33.46/32 proto tcp dport 62142 DNAT to 10.40.0.103:62142;
    }
  }


